---
- name: Event-Driven Ansible - VMs
  hosts: localhost
  gather_facts: true
  become: true
  vars:
    vm_ram_gb: 4                # RAM per VM in GB
    vm_storage_gb: 60           # Storage per VM in GB
    host_os_ram_gb: 2           # Host OS RAM reservation
    ram_buffer_percent: 20      # RAM buffer percentage
    storage_buffer_percent: 20  # Storage buffer percentage
  tasks:
    - name: Ensure running on VM
      ansible.builtin.assert:
        that: ansible_virtualization_role == 'host'

    - name: Get LXD storage pool info
      ansible.builtin.command: lxc storage show default --resources
      register: lxd_storage
      changed_when: false

    - name: Set storage facts
      ansible.builtin.set_fact:
        storage_total_gb: "{{ (lxd_storage.stdout | from_yaml).space.total | float / 1024 / 1024 / 1024 | round }}"
        storage_used_gb: "{{ (lxd_storage.stdout | from_yaml).space.used | float / 1024 / 1024 / 1024 | round }}"

    - name: Calculate max values
      ansible.builtin.set_fact:
        max_vms_cpu: "{{ (ansible_processor_vcpus * 2) | int }}"
        max_vms_ram: "{{ ((ansible_memtotal_mb / 1024 - host_os_ram_gb - (ansible_memtotal_mb / 1024 * ram_buffer_percent / 100)) / vm_ram_gb) | int }}"
        max_vms_storage: "{{ ((storage_total_gb | int * (100 - storage_buffer_percent) / 100) / vm_storage_gb) | int }}"

    - name: Get current VM count
      become: true
      ansible.builtin.shell: set -o pipefail; lxc list -f csv -cn | grep "^vm-"
      args:
        executable: /bin/bash
      register: current_vms
      changed_when: false

    - name: Determine limiting factor
      ansible.builtin.set_fact:
        max_vms: "{{ [max_vms_cpu, max_vms_ram] | min }}"

    - name: Generate capacity report content
      ansible.builtin.copy:
        content: |
          System Capacity Report
          =====================
          Current VMs.............: {{ current_vms.stdout_lines | length }}
          Hard Cap for VMs (CPU/RAM)..: {{ max_vms }}

          Resource Status:
          ---------------
          CPU................: {{ max_vms_cpu }} VMs ({{ ansible_processor_vcpus }} vCPUs Ã— 2)
          RAM................: {{ max_vms_ram }} VMs ({{ (ansible_memtotal_mb / 1024) | float | round }}GB total)
          Storage............: {{ max_vms_storage | int }} VMs ({{ storage_total_gb | float | round }}GB total)
          {% if (current_vms.stdout_lines | length) > (max_vms_storage | int) %}
          WARNING: Storage capacity exceeded recommended limit of {{ max_vms_storage | int }} VMs
          {% endif %}
        dest: "/var/log/vm_capacity_report.txt"
        mode: '0644'

    - name: Check if new VM can be created
      ansible.builtin.assert:
        that: (current_vms.stdout_lines | length) + 1 <= max_vms | int
        fail_msg: "Would exceed calculated maximum. View report: `cat /var/log/vm_capacity_report.txt`"

    - name: Check if pressure metrics are available
      ansible.builtin.stat:
        path: /proc/pressure
      register: pressure_exists

    - name: Use PSI metrics for resource checks
      when: pressure_exists.stat.exists
      block:
        - name: Read CPU pressure metrics
          ansible.builtin.command:
            cmd: cat /proc/pressure/cpu
          changed_when: false
          register: cpu_pressure

        - name: Read memory pressure metrics
          ansible.builtin.command:
            cmd: cat /proc/pressure/memory
          changed_when: false
          register: memory_pressure

        - name: Check memory pressure
          ansible.builtin.assert:
            that:
              - memory_pressure.stdout_lines[0] | split('avg60=') | last | split(' ') | first | float <= 50.0
            fail_msg: "Memory pressure too high: {{ memory_pressure.stdout_lines[0] | split('avg60=') | last | split(' ') | first }}%"
            success_msg: "Memory pressure is acceptable"

        - name: Check CPU pressure
          ansible.builtin.assert:
            that:
              - cpu_pressure.stdout_lines[0] |
                split('avg60=') |
                last | split(' ') | first |
                float <= [ansible_processor_vcpus | int - 2, 2] | max
            fail_msg: "CPU pressure too high: {{ cpu_pressure.stdout_lines[0] | split('avg60=') | last | split(' ') | first }}%"
            success_msg: "CPU pressure is acceptable"
      rescue:
        - name: Fall back to traditional resource checks
          block:
            - name: Check load average
              ansible.builtin.assert:
                that:
                  - ansible_loadavg['1m'] | float <= (ansible_processor_vcpus | int - 2)
                fail_msg: "System load is too high: {{ ansible_loadavg['1m'] }}"
                success_msg: "System load is acceptable"

    - name: Claim a VM
      ansible.builtin.uri:
        url: "https://beta.deeep.network/api/v1/device/{{ ansible_nodename }}/claim"
        return_content: true
        status_code: 200
      register: _claim

    - name: Deploy VM
      when:
        - _claim['json']['vm'] is defined
        - _claim['json']['vm'] is not none
      vars:
        vm: "{{ _claim['json']['vm'] }}"
        vm_hostname: "{{ vm['name'] | split('.') | first }}.box.nerd-node.com"
        eda_rulebook: "eda_services"
        _vcpus: "{{ vm['vcpus'] | int }}"
        _memory: "{{ (vm['memory'] | int >= 1024) | ternary(vm['memory'] | int, '1024') }}MiB"
        _disk: "{{ vm['disk'] | int }}GiB"
      block:
        - name: Create VM with LXD
          community.general.lxd_container:
            name: "{{ vm['name'] }}"
            ignore_volatile_options: true
            type: virtual-machine
            state: started
            source:
              protocol: simplestreams
              type: image
              mode: pull
              alias: "24.04"
              server: https://cloud-images.ubuntu.com/releases
            config:
              limits.cpu: "{{ _vcpus }}"
              limits.memory: "{{ _memory }}"
              cloud-init.user-data: "{{ lookup('ansible.builtin.template', 'user-data.yml.j2') }}"
            devices:
              root:
                path: /
                pool: default
                type: disk
                size: "{{ _disk }}"
            profiles:
              - "default"
            wait_for_ipv4_addresses: true
            wait_for_container: true
            timeout: 300
          register: _deployed_vm

        - name: Set device private key
          when: _deployed_vm.addresses is defined
          no_log: true
          block:
            - name: Fetch private key from Pulumi
              become: true
              become_user: nerdnode
              become_flags: "-i"
              # @todo should be moved to a chef habitat package to be installed in /usr/local/bin
              ansible.builtin.command:
                cmd: $HOME/.pulumi/bin/esc env open deeep-network/prod/deeep-device 'device.private_key'
              changed_when: false
              register: private_key

            - name: Save private key file
              become: true
              ansible.builtin.command:
                cmd: sudo lxc exec {{ vm['name'] }} -- su -c "echo {{ private_key.stdout }} | base64 -d > /device-private-key"
              changed_when: false

    - name: Check for orphaned VM
      ansible.builtin.uri:
        url: "https://beta.deeep.network/api/v1/device/{{ ansible_nodename }}/vms"
        return_content: true
        status_code: 200
      register: _vms

    - name: Determine VMs to delete
      vars:
        _expected: "{{ _vms['json']['expected'] }}"
        _orphaned: "{{ _vms['json']['orphaned'] }}"
      ansible.builtin.set_fact:
        _decomissioning: "{{ (current_vms.stdout_lines | difference(_expected)) + _orphaned | unique }}"

    - name: Delete VM
      when:
        - _decomissioning | length > 0
      community.general.lxd_container:
        name: "{{ _vm }}"
        state: absent
        type: virtual-machine
      loop: "{{ _decomissioning }}"
      loop_control:
        loop_var: _vm
