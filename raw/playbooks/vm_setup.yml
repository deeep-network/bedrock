---
- name: Default Setup
  hosts: localhost
  gather_facts: true
  become: true
  vars:
    user: nerdnode
  tasks:
    - name: Wait for unattended-upgrades to finish if started
      ansible.builtin.command: systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true
      register: unattended_upgrades_completed
      changed_when: false

    - name: Gather the package facts
      ansible.builtin.package_facts:
        manager: auto

    - name: Disable unattended-upgrades
      when: '"unattended-upgrades" in ansible_facts.packages'
      block:
        - name: Set all auto update options to 0
          ansible.builtin.copy:
            dest: /etc/apt/apt.conf.d/20auto-upgrades
            content: |
              APT::Periodic::Update-Package-Lists "0";
              APT::Periodic::Unattended-Upgrade "0";
            mode: '0644'
          failed_when: false

        - name: Stop unattended-upgrades systemd services
          ansible.builtin.systemd_service:
            name: unattended-upgrades
            state: stopped

        - name: Uninstall unattended upgrades
          ansible.builtin.apt:
            name: unattended-upgrades
            state: absent
            lock_timeout: 120
            force_apt_get: true

        - name: Prevent unattended upgrades from being installed
          ansible.builtin.dpkg_selections:
            name: unattended-upgrades
            selection: hold

    - name: Disable do-release-upgrade
      ansible.builtin.copy:
        dest: /usr/bin/do-release-upgrade
        content: |
          #!/usr/bin/python3
          import sys
          sys.exit(1)
        backup: true
        mode: '0755'

    - name: Check trusted.gpg key location
      ansible.builtin.stat:
        path: /etc/apt/trusted.gpg
      register: trusted_key_location

    - name: Move if in deprecated location
      when: trusted_key_location.stat.exists
      ansible.builtin.copy:
        src: "{{ trusted_key_location.stat.path }}"
        dest: /etc/apt/trusted.gpg.d/
        mode: '0644'
        remote_src: true

    - name: Create group for {{ user }}
      ansible.builtin.group:
        name: "{{ user }}"
        system: true
        state: present

    - name: Add {{ user }}
      ansible.builtin.user:
        name: "{{ user }}"
        groups:
          - sudo
        append: true
        state: present
        createhome: true
        shell: /bin/bash

    - name: Add sudoer permissions to {{ user }}
      ansible.builtin.copy:
        dest: /etc/sudoers.d/80-ansible-{{ user }}-user
        content: "{{ user }} ALL=(ALL) NOPASSWD:ALL"
        mode: '0440'

    ## needs to mirror templates/user-data.yml.j2 `packages`
    - name: Install dependencies
      ansible.builtin.apt:
        pkg:
          - pipx
          - git
          - acl
          - nano
          - curl
          - jq
          - ufw
          - unzip
        update_cache: true
        lock_timeout: 120
        force_apt_get: true

    - name: Add pipx path
      ansible.builtin.copy:
        dest: /etc/profile.d/pipx.sh
        content: |
          PATH=$HOME/.local/bin:$PATH
          export PIPX_HOME=/opt/pipx
          export PIPX_BIN_DIR=/usr/local/bin
        mode: '0644'

    - name: Install ansible
      ansible.builtin.shell: |
        pipx install ansible-core ansible-sign
      args:
        creates: /opt/pipx/venvs/ansible-core
      changed_when: false

    - name: Install ansible sign
      ansible.builtin.shell: |
        pipx install ansible-sign
      args:
        creates: /opt/pipx/venvs/ansible-sign
      changed_when: false

    - name: Install ansible dependencies
      ansible.builtin.shell: |
        pipx inject ansible-core psutil netaddr pytz pynetbox
        pipx ensurepath
      changed_when: false

    - name: Create Ansible log directory
      ansible.builtin.file:
        state: directory
        path: /var/log/ansible
        mode: '0777'

    - name: Setup ufw
      ansible.builtin.shell: |
        ufw allow ssh
        ufw enable
      changed_when: false

    - name: Disable root login over SSH
      ansible.builtin.lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: ^PermitRootLogin
        line: PermitRootLogin no
        state: present
      notify: restart ssh

    - name: Security | disable password login
      ansible.builtin.lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: ^PasswordAuthentication
        line: PasswordAuthentication no
        state: present
      notify: restart ssh

  handlers:
    - name: Restart ssh
      ansible.builtin.systemd_service:
        name: ssh
        daemon_reload: true
        enabled: true
        state: restarted
      failed_when: false
      listen: restart ssh

- name: Install user specific
  hosts: localhost
  gather_facts: true
  become: true
  become_user: nerdnode
  become_flags: "-i"
  tasks:
    # @todo - upgrade to openpubkey or BastionZero
    - name: Install authorized keys
      ansible.builtin.blockinfile:
        dest: ~/.ssh/authorized_keys
        append_newline: true
        prepend_newline: true
        block: |
          ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOEu3Yh+xr+oNfcj72bcqcZNhg3D1SzeHh+BQKX4/05V anthony@nerdnode.io
        create: true
        mode: '0600'
        state: present

    - name: Fetch install collections playbook
      ansible.builtin.uri:
        url: https://raw.githubusercontent.com/deeep-network/ansible_collections/main/raw/playbooks/collections_install.yml
        return_content: true
      register: _collections_install

    - name: Run install collections playbook
      ansible.builtin.command:
        cmd: ansible-playbook /dev/stdin
        stdin: "{{ _collections_install.content }}"
      register: _install_results
      changed_when: (_install_results.stdout | regex_search('changed=(\\d+)', '\\1') | first) | int > 0

    # lazy attempt to use role since raw
    - name: Install Netdata
      ansible.builtin.command:
        cmd: ansible localhost -m ansible.builtin.include_role -a name=depin.libs.netdata
      changed_when: false
      failed_when: false

    # lazy attempt to use netbox playbook since raw
    # should this be ad-hoc like above or playbook? I'm leaning playbook
    # so that you can call it at random also
    - name: Update Netbox
      ansible.builtin.command:
        cmd: ansible-playbook depin.libs.netbox
      changed_when: false
      failed_when: false
