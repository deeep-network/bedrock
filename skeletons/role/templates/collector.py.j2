#!/usr/bin/env python3
import os
import requests
import socket
import time
from pathlib import Path

from prometheus_client import start_http_server, REGISTRY, GC_COLLECTOR, PLATFORM_COLLECTOR, PROCESS_COLLECTOR
from prometheus_client.core import GaugeMetricFamily, Summary
from prometheus_client.registry import Collector

try:
    from utils_lxd import lxd_get
except ImportError as imp_exc:
    LXD_UTILS_IMPORT_ERROR = imp_exc
else:
    LXD_UTILS_IMPORT_ERROR = None

class MetricsCollector(Collector):
    """Collector for Gala Node information"""

    def collect(self):
      result = []
      service_metrics_collected = 1

      device = 'molecule'
      # fetch device hostname
      # @note - LXD specific feature
      {% if not molecule_inventory is defined -%}
      if LXD_UTILS_IMPORT_ERROR is None:
        device = lxd_get("1.0/config/user.location")['value']
        device = device['value']
      {% endif %}

      hostname = socket.gethostname()
      service = Path(__file__).stem

      _labels = ['device', 'instance', 'service']
      _label_values = [device, hostname, service]

      success = GaugeMetricFamily('service_metrics_collected','service metrics collected successfully', labels=_labels)
      success.add_metric(_label_values, value=service_metrics_collected)

      result.extend([success])
      return result

if __name__ == "__main__":
  REGISTRY.unregister(GC_COLLECTOR)
  REGISTRY.unregister(PLATFORM_COLLECTOR)
  REGISTRY.unregister(PROCESS_COLLECTOR)
  REGISTRY.register(MetricsCollector())

  start_http_server({{ metrics_port[metrics_parent_role_name] }})
  while True:
    time.sleep(30)
