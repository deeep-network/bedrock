---
- name: Deploy VM
  hosts: localhost
  gather_facts: true
  become: true
  vars:
    # @todo - pull this from source
    min_available_memory_mb: 4096
    min_available_disk_gb: 120
  tasks:
    - name: Check disk space
      when: ansible_mounts is defined
      block:
        - name: Calculate available disk space
          ansible.builtin.set_fact:
            available_disk_gb: |
              {{
                (ansible_mounts | selectattr('mount', 'equalto', '/') |
                map(attribute='size_available') | list | first | int / 1024 / 1024 / 1024) |
                round(2)
              }}

        - name: Check available disk space
          ansible.builtin.assert:
            that:
              - available_disk_gb | float >= min_available_disk_gb
            fail_msg: "Not enough free disk space. Required: {{ min_available_disk_gb }}GB, Available: {{ available_disk_gb }}GB"
            success_msg: "Sufficient free disk space available"

    - name: Check system resource availability
      block:
        - name: Check if pressure metrics are available
          ansible.builtin.stat:
            path: /proc/pressure
          register: pressure_exists

        - name: Use PSI metrics for resource checks
          when: pressure_exists.stat.exists
          block:
            - name: Read CPU pressure metrics
              ansible.builtin.command:
                cmd: cat /proc/pressure/cpu
              changed_when: false
              register: cpu_pressure

            - name: Read memory pressure metrics
              ansible.builtin.command:
                cmd: cat /proc/pressure/memory
              changed_when: false
              register: memory_pressure

            - name: Check memory pressure
              ansible.builtin.assert:
                that:
                  - memory_pressure.stdout_lines[0] | split('avg10=') | last | split(' ') | first | float <= 50.0
                fail_msg: "Memory pressure too high: {{ memory_pressure.stdout_lines[0] | split('avg10=') | last | split(' ') | first }}%"
                success_msg: "Memory pressure is acceptable"

            - name: Check CPU pressure
              ansible.builtin.assert:
                that:
                  - cpu_pressure.stdout_lines[0] |
                    split('avg10=') |
                    last | split(' ') | first |
                    float <= (ansible_facts['processor_cores'] | int - 2)
                fail_msg: "CPU pressure too high: {{ cpu_pressure.stdout_lines[0] | split('avg10=') | last | split(' ') | first }}%"
                success_msg: "CPU pressure is acceptable"
          rescue:
            - name: Fall back to traditional resource checks
              block:
                - name: Check available memory
                  ansible.builtin.assert:
                    that:
                      - ansible_facts['memfree_mb'] | int >= min_available_memory_mb
                    fail_msg: "Not enough free memory. Required: {{ min_available_memory_mb }}MB, Available: {{ ansible_memfree_mb | int }}MB"
                    success_msg: "Sufficient free memory available"

                - name: Check load average
                  ansible.builtin.assert:
                    that:
                      - ansible_loadavg['1m'] | float <= (ansible_facts['processor_cores'] | int - 2)
                    fail_msg: "System load is too high: {{ ansible_loadavg['1m'] }}"
                    success_msg: "System load is acceptable"

    - name: Claim a VM
      ansible.builtin.uri:
        url: "https://beta.deeep.network/api/v1/device/{{ ansible_nodename }}/claim"
        return_content: true
        status_code: 200
      register: _claim

    - name: Deploy VM
      when:
        - ansible_virtualization_role == 'host'
        - _claim['json']['vm'] is defined
      block:
        - name: Create VM with LXD
          vars:
            vm: "{{ _claim['json']['vm'] }}"
            vm_hostname: "{{ vm['name'] | split('.') | first }}.box.nerd-node.com"
            eda_rulebook: "eda_services"
            _vcpus: "{{ vm['vcpus'] | int }}"
            _memory: "{{ (vm['memory'] | int >= 1024) | ternary(vm['memory'] | int, '1024') }}MiB"
            _disk: "{{ vm['disk'] | int }}GiB"
          community.general.lxd_container:
            name: "{{ vm['name'] }}"
            ignore_volatile_options: true
            type: virtual-machine
            state: started
            source:
              protocol: simplestreams
              type: image
              mode: pull
              alias: "24.04"
              server: https://cloud-images.ubuntu.com/releases
            config:
              limits.cpu: "{{ _vcpus }}"
              limits.memory: "{{ _memory }}"
              cloud-init.user-data: "{{ lookup('ansible.builtin.template', 'user-data.yml.j2') }}"
            devices:
              root:
                path: /
                pool: default
                type: disk
                size: "{{ _disk }}"
            profiles:
              - "default"
            wait_for_ipv4_addresses: true
            wait_for_container: true
            timeout: 300
          register: _deployed_vm

        - name: Set device private key
          when: _deployed_vm.addresses is defined
          no_log: true
          block:
            - name: Fetch private key from Pulumi
              ansible.builtin.command:
                cmd: esc env open deeep-network/prod/deeep-device 'device.private_key'
              changed_when: false
              register: private_key

            - name: Save private key file
              become: true
              ansible.builtin.command:
                cmd: lxc exec {{ claim_results['json']['vm'] }} -- su -c "echo {{ private_key.stdout }} | base64 -d > /device-private-key"
              changed_when: false

    - name: Check for orphaned VM
      ansible.builtin.uri:
        url: "https://beta.deeep.network/api/v1/device/{{ ansible_nodename }}/orphaned"
        return_content: true
        status_code: 200
      register: _orphaned

    - name: Destroy VM
      when:
        - ansible_virtualization_role == 'host'
        - _orphaned['json']['vms'] | length > 0
      block:
        - name: Delete a container
          community.general.lxd_container:
            name: "{{ _vm }}"
            state: absent
            type: virtual-machine
          loop: "{{ _orphaned['json']['vms'] | list }}"
          loop_control:
            loop_var: _vm
