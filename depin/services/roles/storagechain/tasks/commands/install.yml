---
- name: Get pidof resize2fs
  community.general.pids:
    name: resize2fs
  register: _resize2fs

- name: Wait for resize2fs
  when: _resize2fs | length
  ansible.builtin.wait_for:
    path: /proc/{{ _pid }}/status
    state: absent
  loop: "{{ _resize2fs['pids'] }}"
  loop_control:
    loop_var: _pid

- name: Install programs
  ansible.builtin.include_role:
    name: depin.core.installer

- name: Create videos folder
  become: true
  ansible.builtin.file:
    state: directory
    owner: root
    group: root
    mode: '0755'
    dest: "{{ storagechain_dir | dirname }}/videos"

- name: Setup IPFS
  vars:
    ipfs_dir: "{{ storagechain_dir }}"
    ipfs_private_network: true
    ipfs_addresses_api: /ip4/0.0.0.0/tcp/5001
    ipfs_addresses_gateway: /ip4/0.0.0.0/tcp/8080
    ipfs_datastore_storage_max: "{{ storagechain_node_size }}"
    ipfs_api_http_headers:
      Access-Control-Allow-Origin: ["*"]
      Access-Control-Allow-Methods: ["PUT", "POST"]
  ansible.builtin.include_role:
    name: depin.libs.ipfs
    tasks_from: commands/setup.yml

- name: Setup IPFS Cluster
  vars:
    ipfs_cluster_type: "{{ storagechain_ipfs_cluster_type }}"
    ipfs_cluster_dir: "{{ storagechain_dir }}"
    ipfs_cluster_config_url: "{{ storagechain_ipfs_cluster_remote_config }}"
    ipfs_cluster_command_args: "{{ storagechain_ipfs_cluster_args }}"
    ipfs_cluster_peername: "{{ storagechain_node_name }}"
    ipfs_cluster_monitor_ping_interval: 5s
    ipfs_cluster_ipfs_connector_ipfshttp_node_multiaddress: /ip4/0.0.0.0/tcp/5001
    ipfs_cluster_api_restapi_http_listen_multiaddress: /ip4/0.0.0.0/tcp/9094
    ipfs_cluster_env_vars:
      CLUSTER_MONITORINGINTERVAL: 5s
      CLUSTER_HOST_NAME: cluster-internal.io
      CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS: /ip4/0.0.0.0/tcp/9094
      CLUSTER_SECRET: "{{ storagechain_cluster_secret }}"
  ansible.builtin.include_role:
    name: depin.libs.ipfs_cluster
    tasks_from: commands/setup.yml

- name: Install systemd service
  become: true
  ansible.builtin.template:
    src: templates/systemd.service.j2
    dest: /etc/systemd/system/file-server-lin.service
    owner: root
    group: root
    mode: '0644'

- name: Set firwall rules
  become: true
  community.general.ufw:
    rule: allow
    port: "{{ _port }}"
    proto: "{{ storagechain_firewall['protocol']['value'] | default('tcp') }}"
  loop: "{{ storagechain_firewall['ports'] }}"
  loop_control:
    loop_var: _port

- name: Start
  ansible.builtin.include_tasks: commands/start.yml

# @todo - move outside to VM layer
- name: Enable DDNS
  vars:
    inadyn_hostname: "{{ storagechain_dns }}"
  ansible.builtin.include_role:
    name: depin.libs.inadyn

# @todo - temporary solution to get storagechain the IP address of node
- name: Forward IP Address to Storagechain
  vars:
    host_ipv4_address: "{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses | first) }}"
  tags: molecule-notest
  ansible.builtin.uri:
    url: 'https://api.storagechain.io/api/node/nerd-node/add-ipaddress'
    method: POST
    body:
      nodeId: "{{ storagechain_node_id }}"
      email: "{{ storagechain_email }}"
      password: "{{ storagechain_password }}"
      ipAddress: "{{ host_ipv4_address }}"
    body_format: json
    headers:
      Accept: application/json; indent=4
      Content-Type: application/json
    status_code:
      - 200
  register: send_ipv4_address
  retries: 5
  delay: 5
  until: send_ipv4_address is not failed

- name: Install metrics
  ansible.builtin.include_role:
    name: depin.core.metrics

- name: Assert
  when: "'molecule' in groups"
  block:
    # relative to playbook (molecule - default)
    - name: Common install asserts
      ansible.builtin.include_tasks:
        file: tests/install.yml
