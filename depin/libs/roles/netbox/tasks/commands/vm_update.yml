- name: Create interface
  block:
    - name: Get interface
      vars:
        _filter: "virtual_machine_id={{ vm_id }} name=vm-{{ vm_id }}-eth0"
      ansible.builtin.set_fact:
        netbox_interface: "{{ lookup('depin.libs.netbox', 'virtualization.interfaces', filter=_filter) }}"

    - name: Create interface # noqa syntax-check[unknown-module]
      when: netbox_interface == None
      depin.libs.netbox:
        app: 'virtualization.interfaces'
        create:
          virtual_machine: "{{ vm_id }}"
          name: "vm-{{ vm_id }}-eth0"
          enabled: true
          mtu: 65536
          description: "Primary Interface"
          detail: ""
      register: _create_interface

    - name: Set VM interface
      when: 
        - not _create_interface is skipped
        - _create_interface['created'] is defined
      ansible.builtin.set_fact:
        vm_interface: "{{ (_create_interface['created'] | first)['id'] }}"

    - name: Set VM interface
      when: _create_interface is skipped
      ansible.builtin.set_fact:
        vm_interface: "{{ netbox_interface['id'] }}"

- name: Update VM
  vars:
    _ipv4_address: "{{ ipv4_address }}/32"
  block:
    - name: Fetch netbox data
      vars:
        _filter: "address={{ _ipv4_address }} virtual_machine_id={{ vm_id }}"
      ansible.builtin.set_fact:
        netbox_vm: "{{ lookup('depin.libs.netbox', 'virtualization.virtual-machines', filters=vm_id) }}"
        netbox_ip_addresses: "{{ query('depin.libs.netbox', 'ipam.ip-addresses', filters=_filter) }}"

    - name: Create primary IPv4 address
      when: netbox_ip_addresses | length == 0
      depin.libs.netbox:
        app: 'ipam.ip-addresses'
        create:
          address: "{{ _ipv4_address }}"
          status: active
          assigned_object_type: 'virtualization.vminterface'
          assigned_object_id: "{{ vm_interface }}"
          dns_name: "{{ hostname }}"
          description: "Cloudcone Public IP"
          detail: ""
      register: _create_ip_address

    - name: Set ip address
      when:
        - not _create_ip_address is skipped
        - _create_ip_address is defined
      ansible.builtin.set_fact:
        ip_address_id: "{{ (_create_ip_address['created'] | first)['id'] }}"

    - name: Set ip address
      when: _create_ip_address is skipped
      ansible.builtin.set_fact:
        ip_address_id: "{{ (netbox_ip_addresses | first)['id'] }}"

    - name: Update record
      when: netbox_vm['primary_ip4'] == None or netbox_vm['primary_ip4']['address'] != _ipv4_address
      depin.libs.netbox:
        app: 'virtualization.virtual-machines'
        update:
          id: "{{ vm_id }}"
          status: "active"
          primary_ip4: "{{ ip_address_id }}"
          # cluster:
          #   name: @todo - get device hostname
